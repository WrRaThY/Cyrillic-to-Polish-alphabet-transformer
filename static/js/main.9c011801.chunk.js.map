{"version":3,"sources":["containers/App.js","serviceWorker.js","index.js"],"names":["library","add","faPencilAlt","faCheckSquare","App","state","ruInput","plOutput","startTextAreaRowCount","transformThat","event","_this","setState","currentTarget","value","output","polishifyAllContent","input","result","split","forEach","letter","polishifyLetter","buildGoogleTranslateUrl","notEncodedUrl","encodeURI","react_default","a","createElement","className","react_fontawesome_index_es","icon","color","id","rows","this","onKeyUp","htmlFor","contentEditable","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c011801.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPencilAlt, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nlibrary.add(faPencilAlt, faCheckSquare);\n\nclass App extends Component {\n    state = {\n        ruInput: \"\",\n        plOutput: \"\",\n        startTextAreaRowCount: 20\n    };\n\n    render () {\n        return (\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <h1>Enter russian on the left</h1>\n                    <h1>And see something actually readable on the right</h1>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"md-form amber-textarea active-amber-textarea-2\">\n                            <FontAwesomeIcon\n                                icon={faPencilAlt} color=\"orange\"\n                            />\n                            <textarea\n                                id=\"russian-text\"\n                                className=\"md-textarea form-control\"\n                                rows={this.state.startTextAreaRowCount}\n                                onKeyUp={this.transformThat}\n                            />\n                            <label htmlFor=\"russian-text\">Cyrillic (Russian) goes here</label>\n                        </div>\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"md-form amber-textarea active-amber-textarea-2\">\n                            <FontAwesomeIcon\n                                icon={faCheckSquare} color=\"green\"\n                            />\n                            <textarea\n                                id=\"polish-text\"\n                                className=\"md-textarea form-control\"\n                                rows={this.state.startTextAreaRowCount}\n                                contentEditable={false}\n                                value={this.state.plOutput}\n                            />\n                            <label htmlFor=\"polish-text\">latin (with PL characters) comes out here</label>\n                        </div>\n                    </div>\n\n                </div>\n                <div>\n                    <h3>And if Russian confuses you, the translation is <a href={this.buildGoogleTranslateUrl()} target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n\n                    </h3>\n                </div>\n\n            </div>\n        );\n    }\n\n    transformThat = (event) => {\n        this.setState({ ruInput: event.currentTarget.value });\n\n        let output = this.polishifyAllContent(this.state.ruInput);\n        this.setState({ plOutput: output })\n    };\n\n    polishifyAllContent = (input) => {\n        if (!input) {\n            return \"\";\n        }\n\n        let result = \"\";\n        input.split('').forEach(letter => {\n            result += this.polishifyLetter(letter);\n        });\n\n        return result;\n    };\n\n    buildGoogleTranslateUrl = () => {\n        let notEncodedUrl = \"https://translate.google.com/#view=home&op=translate&sl=ru&tl=en&text=\" + this.state.ruInput;\n        return encodeURI(notEncodedUrl);\n    };\n\n    polishifyLetter = (letter) => {\n        switch (letter) {\n            case 'A':\n            case 'a':\n                return \"a\";\n            case 'Б':\n            case 'б':\n                return \"b\";\n            case 'В':\n            case 'в':\n                return \"w\";\n            case 'Г':\n            case 'г':\n                return \"g\";\n            case 'Д':\n            case 'д':\n                return \"d\";\n            case 'Е':\n            case 'е':\n                return \"je\";\n            case 'Ё':\n            case 'ё':\n                return \"jo\";\n            case 'Ж':\n            case 'ж':\n                return \"ż\";\n            case 'З':\n            case 'з':\n                return \"z\";\n            case 'И':\n            case 'и':\n                return \"i\";\n            case 'Й':\n            case 'й':\n                return \"i\";\n            case 'К':\n            case 'к':\n                return \"k\";\n            case 'Л':\n            case 'л':\n                return \"l\";\n            case 'М':\n            case 'м':\n                return \"m\";\n            case 'Н':\n            case 'н':\n                return \"n\";\n            case 'О':\n            case 'о':\n                return \"o\";\n            case 'П':\n            case 'п':\n                return \"p\";\n            case 'Р':\n            case 'р':\n                return \"r\";\n            case 'С':\n            case 'с':\n                return \"s\";\n            case 'Т':\n            case 'т':\n                return \"t\";\n            case 'У':\n            case 'у':\n                return \"u\";\n            case 'Ф':\n            case 'ф':\n                return \"f\";\n            case 'Х':\n            case 'х':\n            case 'x':\n            case 'X':\n                return \"h\";\n            case 'Ц':\n            case 'ц':\n                return \"c\";\n            case 'Ч':\n            case 'ч':\n                return \"cz\";\n            case 'Ш':\n            case 'ш':\n                return \"sz\";\n            case 'Щ':\n            case 'щ':\n                return \"sia\";\n            case 'Ы':\n            case 'ы':\n                return \"y\";\n            case 'Э':\n            case 'э':\n                return \"e\";\n            case 'Ю':\n            case 'ю':\n                return \"ju\";\n            case 'Я':\n            case 'я':\n                return \"ja\";\n            case 'Ъ':\n            case 'ъ':\n                return \"!\";\n            case 'Ь':\n            case 'ь':\n                return \"`\";\n            default:\n                return letter;\n        }\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}